AWSTemplateFormatVersion: 2010-09-09
Description: "CloudFormation to Delegate Administation of VPC IPAM Manager to the Network Account."
Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Account Configuration
        Parameters:
          - pNetworkAccountId
      - Label:
          default: Data Retention Configuration
        Parameters:
          - pLambdaLogGroupRetention
      - Label:
          default: Tagging Configuration
        Parameters:
          - pTagEnvironment

Parameters:
  pLambdaLogGroupRetention:
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Default: 365
    Description: Specifies the number of days you want to retain log events
    Type: String
  pNetworkAccountId:
    Description: Network Account ID
    Type: String
    AllowedPattern: '^[0-9]{12}$'
    ConstraintDescription: "This must be a 12 character string."
    MinLength: 12
    MaxLength: 12
  pTagEnvironment:
    Type: String
    Description: Select the Name of the Environment
    AllowedValues:
      - Production
      - UAT
      - Development

Resources:
  # CloudWatch Log Group for Lambda Functions
  rIpamGetPoolIdLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${rIpamLambdaDelegate}
      RetentionInDays: !Ref pLambdaLogGroupRetention

  # IAM Role, Lambda Function and Custom Resource for Delegating Administration of IPAM to the Network Account
  rIpam:
    Type: Custom::IPAM
    Version: "1.0"
    Properties:
      accountid: !Ref pNetworkAccountId
      ServiceToken: !GetAtt rIpamLambdaDelegate.Arn
  rIpamLambdaRoleDelegate:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service: "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      Policies:
        - PolicyName: ipampolicy
          PolicyDocument:
            Statement:
              - Effect: "Allow"
                Action:
                  - "ec2:EnableIpamOrganizationAdminAccount"
                  - "ec2:DisableIpamOrganizationAdminAccount"
                  - "organizations:RegisterDelegatedAdministrator"
                  - "organizations:DeregisterDelegatedAdministrator"
                  - "organizations:EnableAWSServiceAccess"
                  - "iam:CreateServiceLinkedRole"
                Resource: "*"
  rIpamLambdaDelegate:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          from botocore.exceptions import ClientError

          ec2_client = boto3.client('ec2')

          def lambda_handler(event, context):
              if (event['RequestType'] == 'Create' or event['RequestType'] == 'Update'):
                  try:
                      response = ec2_client.enable_ipam_organization_admin_account(
                          DryRun = False,
                          DelegatedAdminAccountId = (event['ResourceProperties']['accountid'])
                      )
                      print(response)
                      if response['Success'] == True:
                          print(f"IPAM configured")
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except ClientError as e:
                      print(e.response['Error']['Message'])
                      cfnresponse.send(event, context, cfnresponse.FAILED, e.response)
              elif (event['RequestType'] == 'Delete'):
                  try:
                      response = ec2_client.disable_ipam_organization_admin_account(
                          DryRun = False,
                          DelegatedAdminAccountId = (event['ResourceProperties']['accountid'])
                      )
                      print(response)
                      if response['Success'] == True:
                          print("IPAM Disabled")
                          cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                  except ClientError as e:
                      print(e.response['Error']['Message'])
                      cfnresponse.send(event, context, cfnresponse.FAILED, e.response)
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
      FunctionName: lambda-vpc-ipam-delegate-admin
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt rIpamLambdaRoleDelegate.Arn
      Runtime: python3.9
      Timeout: 60
      Tags:
        - Key: Name
          Value: VPC-IPAM-Admin-Delegation
        - Key: Environment
          Value: !Ref pTagEnvironment